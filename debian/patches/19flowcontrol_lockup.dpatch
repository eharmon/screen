#! /bin/sh /usr/share/dpatch/dpatch-run
## 19flowcontrol_lockup.dpatch by  <hesso@pool.math.tu-berlin.de>
##
## DP: Make Flush() truly non-blocking by employing an extra select().
## DP: Thus D_userfd is assured to be in non-blocking mode on return
## DP: (even if the return was premature due to select() timing out),
## DP: so the SetTTY() call in FreeDisplay() doesn't have to be
## DP: safeguarded on its own.
## DP: 
## DP: Note - I'm not satisfied at all with this patch, but I consider
## DP: it an ugly but working kluge, meant only to stay around as long
## DP: as upstream hasn't come up with anything better.

@DPATCH@
diff -Naur screen-4.0.3.orig/display.c screen-4.0.3/display.c
--- screen-4.0.3.orig/display.c	2008-06-01 23:41:50.000000000 +0200
+++ screen-4.0.3/display.c	2008-06-01 23:44:57.000000000 +0200
@@ -3556,6 +3556,8 @@
 {
   register int l;
   register char *p;
+  fd_set fd_s;
+  struct timeval sO;
 
   ASSERT(display);
   l = D_obufp - D_obuf;
@@ -3570,15 +3572,29 @@
       return;
     }
   p = D_obuf;
-  if (fcntl(D_userfd, F_SETFL, 0))
-    debug1("Warning: BLOCK fcntl failed: %d\n", errno);
+  if (fcntl(D_userfd, F_SETFL, FNBLOCK))
+    debug1("Warning: NBLOCK fcntl failed: %d\n", errno);
+  if (D_blocked == 1)
+    D_blocked = 0;
+  D_blocked_fuzz = 0;
   while (l)
     {
-      register int wr;
+      register int wr = 0;
+      sO.tv_sec = 5; sO.tv_usec = 0;
+      while (1) {
+        int sR;
+        FD_ZERO(&fd_s);
+        FD_SET(D_userfd, &fd_s);
+        sR = select(D_userfd+1, NULL, &fd_s, NULL, &sO);
+        if (!sR) {
+          debug("Timeout while waiting for display write fd to unblock\n");
+          return;
+        } else if (sR > 0) break;
+      }
       wr = write(D_userfd, p, l);
       if (wr <= 0) 
 	{
-	  if (errno == EINTR) 
+	  if (errno == EINTR || errno == EAGAIN) 
 	    continue;
 	  debug1("Writing to display: %d\n", errno);
 	  wr = l;
@@ -3591,11 +3607,6 @@
     }
   D_obuffree += l;
   D_obufp = D_obuf;
-  if (fcntl(D_userfd, F_SETFL, FNBLOCK))
-    debug1("Warning: NBLOCK fcntl failed: %d\n", errno);
-  if (D_blocked == 1)
-    D_blocked = 0;
-  D_blocked_fuzz = 0;
 }
 
 void
