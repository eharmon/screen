#! /bin/sh /usr/share/dpatch/dpatch-run
## 50EXP_tilde_expansion.dpatch by  <hesso@pool.math.tu-berlin.de>
##
## DP: Add full tilde expansion to the builtin commands 'source'
## DP: and 'chdir'. Thanks to Nico Golde (#308818) and Steve Kemp
## DP: (#477210) for patch suggestions.

@DPATCH@
diff -Naur screen-4.0.3.orig/extern.h screen-4.0.3/extern.h
--- screen-4.0.3.orig/extern.h	2008-06-01 23:41:50.000000000 +0200
+++ screen-4.0.3/extern.h	2008-06-01 23:45:01.000000000 +0200
@@ -65,6 +65,7 @@
 extern int   MFindUsedLine __P((struct win *, int, int));
 
 /* fileio.c */
+extern char *ExpandFilename __P((const char *));
 extern int   StartRc __P((char *, int));
 extern void  FinishRc __P((char *));
 extern void  RcLine __P((char *, int));
diff -Naur screen-4.0.3.orig/fileio.c screen-4.0.3/fileio.c
--- screen-4.0.3.orig/fileio.c	2008-06-01 23:44:59.000000000 +0200
+++ screen-4.0.3/fileio.c	2008-06-01 23:45:01.000000000 +0200
@@ -24,6 +24,7 @@
 #include <sys/types.h>
 #include <fcntl.h>
 #include <sys/stat.h>
+#include <pwd.h>
 
 #ifndef SIGINT
 # include <signal.h>
@@ -87,6 +88,56 @@
   return cp;
 }
 
+/**
+ * Private simple tilde expansion function, to avoid pulling in
+ * libreadline or similar monster libraries.
+ *
+ * Note: We are applying a conservative match on usernames here.
+ * Jan Nordholz <hesso@pool.math.tu-berlin.de>, 2008/04/27
+ */
+char *
+ExpandFilename(fn)
+const char *fn;
+{
+  char *ret = 0;
+
+  ret = malloc(MAXPATHLEN + 1);
+  snprintf(ret, MAXPATHLEN, "%s", fn);
+
+  if (*fn == '~')
+    {
+      int userlen = strspn(fn+1, "abcdefghijklmnopqrstuvwxyz0123456789-_");
+      if (!userlen)
+        {
+          if (home && *home)
+            {
+	      snprintf(ret, MAXPATHLEN, "%s%s", home, fn+1+userlen);
+	    }
+	  else
+	    {
+              Msg(0, "%s: source: tilde expansion failed.", rc_name);
+            }
+        }
+      else
+        {
+          struct passwd *p;
+          ret[userlen+1] = 0;
+          p = getpwnam(ret+1);
+          ret[userlen+1] = fn[userlen+1];
+          if (p && p->pw_dir)
+            {
+              snprintf(ret, MAXPATHLEN, "%s%s", p->pw_dir, fn+1+userlen);
+	    }
+	  else
+	    {
+              Msg(0, "%s: source: tilde expansion failed.", rc_name);
+            }
+        }
+    }
+
+  return ret;
+}
+
 static char *
 findrcfile(rcfile)
 char *rcfile;
@@ -293,17 +344,21 @@
 do_source(rcfilename)
 char *rcfilename;
 {
+  char *expanded_rcfilename;
+
   if (rc_recursion > 10)
     {
       Msg(0, "%s: source: recursion limit reached", rc_name);
       return;
     }
+  
   rc_recursion++;
-  FinishRc(rcfilename);
+  expanded_rcfilename = ExpandFilename(rcfilename);
+  FinishRc(expanded_rcfilename);
+  free(expanded_rcfilename);
   rc_recursion--;
 }
 
-
 /*
  * Running a Command Line in the environment determined by the display.
  * The fore window is taken from the display as well as the user.
diff -Naur screen-4.0.3.orig/process.c screen-4.0.3/process.c
--- screen-4.0.3.orig/process.c	2008-06-01 23:45:01.000000000 +0200
+++ screen-4.0.3/process.c	2008-06-01 23:45:01.000000000 +0200
@@ -2418,9 +2418,10 @@
 #endif
       break;
     case RC_CHDIR:
-      s = *args ? *args : home;
+      s = ExpandFilename(*args ? *args : home);
       if (chdir(s) == -1)
 	Msg(errno, "%s", s);
+      free(s);
       break;
     case RC_SHELL:
     case RC_DEFSHELL:
